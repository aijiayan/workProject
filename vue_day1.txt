1、验证码机制:首先验证码是从后端随机生成的;[后端永远认为前端可能被伪造]
	(1)后端调用相关的绘图第三方类库或是系统核心绘图类库进行图片的绘制；
	(2)绘制的那些随机的数字、字母都是后端预先定义好的;
	(3)将绘制图片的URL地址,通过网络返送给客服端,然后客户端使用img标签去应用这个验证码的地址
	(4)后端在绘制完毕验证码之后,会把那些保存到Session中;
	(5)当前端提交表单时,后端会把客户端提交的验证码与服务器端的Session验证码进行比较；
2、目前前端三大框架:Vue.js(最火)、React.js（最流行）、Angular.js
3、vue.js是一套构建用户界面的框架,只关注视图层,不仅易于上手,还便于与第三方库或既有项目整合。(vue有配套的第三方类库,可以整合起来做大型项目的开发)
   减少不必要的DOM操作,提高效率,双向数据绑定(通过框架的指令)
4、框架:是一套完整的解决方案;对项目的侵入较大,需要重新架构
   库(插件):提供某个小功能,对项目的侵入较小
5、MVC（Node后端）  MVVM（前端）
   MVC:后端的分层概念	
	    (1)app.js:项目的入口模块,一切的请求都要先进入这里进行处理  注:app.js并没有路由分发的功能,需要调用router.js模块进行路由的分发处理
		(2)router.js：这是路由分发处理模块,为了保证路由模块的职能单一,router.js只负责分发路由,不负责具体业务逻辑的处理,如涉及就调用controller
		(3)controller：这是业务逻辑处理层,封装了一些具体业务逻辑处理的逻辑代码,但是也是为了保证职能单一,如果涉及到数据的CRUD,需要调用Model层
		(4)Model层:职能单一,只负责操作数据库,执行对应的sql语句,进行数据的CRUD
		view视图层,每当用户操作界面,如果需要进行业务的处理,都会通过网络请求,去请求后端的服务器,会被后端的App.js监听到
   MVVM：前端视图层的分成开发思想,主要把每个页面分成M、V、VM,其中VM是思想的核心,是V和M之间的调度者;
		(1)M：保存了每个页面中单独的数据
		(2)V：每个页面中的html结构
		(3)VM：他是一个调度者,分割了M和V,每当V层想要获取数据保存的时候,都需要由VM做中间处理
		主要是为了让我们开发更方便,因为MVVM提供了数据的双向绑定(VM层提供的)
6、前端Vue之类的框架不提倡我们手动操纵DOM元素了（通过指令）